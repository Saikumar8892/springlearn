Agenda:
Bean Scope and Lifecycle
Singleton, Prototype, and Other Scopes
Configuring Scope
Bean Lifecycle / Callbacks
---------------------------------------------------------------------------------------------------------------
Spring Bean Scopes: We can control the scope of the objects created from a particular bean.

1.singleton -> (default) one object instance for each IoC Spring Container
2.prototype -> Scope of bean definition to any number of object instances
3.request->Single definition to the lifecycle of an HTTP. ie each Http request has its own instance of bean
4.session ->Single definition to the lifecycle of an Http session
5.application ->Single definition to the lifecycle of an ServletContext
6.websocket -> Single definition to the lifecycle of a websocket

Life cycle of Bean:
->To implement life cycle simple Pojo class is enough

There are 3 Ways to implement Life cycle:
1.Programatic aproach -> Pojo class needs to implement two interfaces
InitializingBean and DisposableBean and override afterPropertiesSet() and destroy()

2.XML Aproach -> Just create two user defined methods eg:myInit() and myDestroy() and configure them in XML
with init-method="myInit" destroy-method="myDestroy"

3.Annotation Aproach -> Just create two user defined methods and annotate them with @PostConstruct and @PreDestroy add below dependancy

Javax.annotation-api

Suppose we have 100 Test class which has user defined init and destroy method we can confugure them in bean root tag

<beans default-init-method="customInit" default-destroy-method="customDestroy">





